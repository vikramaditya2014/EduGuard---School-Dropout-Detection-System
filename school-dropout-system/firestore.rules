rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && isAdmin();
    }
    
    // Students collection - authenticated users can read, admins/teachers can write
    match /students/{studentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (isAdmin() || isTeacher() || isCounselor());
      allow create: if request.auth != null && isAdmin();
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Academic records - read/write for authorized personnel
    match /academicRecords/{recordId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (isAdmin() || isTeacher());
    }
    
    // Attendance records - read for all, write for authorized personnel
    match /attendanceRecords/{recordId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (isAdmin() || isTeacher());
    }
    
    // Behavioral incidents - read/write for authorized personnel
    match /behavioralIncidents/{incidentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (isAdmin() || isTeacher() || isCounselor());
    }
    
    // Interventions - read for all authenticated users, write for authorized
    match /interventions/{interventionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (isAdmin() || isCounselor());
    }
    
    // Analytics data - read-only for authenticated users
    match /analytics/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTeacher() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    function isCounselor() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'counselor';
    }
    
    function isPrincipal() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'principal';
    }
    
    // Ensure user can only modify their own data unless admin
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Validate required fields for students
    function isValidStudent() {
      return request.resource.data.keys().hasAll(['firstName', 'lastName', 'email', 'grade', 'riskScore', 'status']);
    }
    
    // Validate risk score is within range
    function isValidRiskScore() {
      return request.resource.data.riskScore >= 0 && request.resource.data.riskScore <= 100;
    }
  }
}